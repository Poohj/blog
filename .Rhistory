),
dashboardBody(
tabItems(
tabItem(tabName = "shinydashboard",
box(
title = "Controls",
sliderInput(inputId = "bins",
label = "Number of bins:",
min = 1,
max = 50,
value = 30),
width = 12
),
box(
width = 12,
plotOutput(outputId = "distPlot")
)
),
tabItem(tabName = "shinydashboard_diff",
box(
title = "Controls",
sliderInput(inputId = "bins_2",
label = "Number of bins:",
min = 1,
max = 50,
value = 30),
width = 12
),
box(
width = 12,
plotOutput(outputId = "distPlot_2")
)
)
)
)
)
server <- function(input, output) {
output$distPlot <- renderPlot({
x    <- faithful$waiting
bins <- seq(min(x), max(x), length.out = input$bins + 1)
hist(x, breaks = bins, col = "#75AADB", border = "white",
xlab = "",
main = "히스토그램")
})
output$distPlot_2 <- renderPlot({
x    <- faithful$waiting
bins <- seq(min(x), max(x), length.out = input$bins_2 + 1)
hist(x, breaks = bins, col = "red", border = "white",
xlab = "",
main = "히스토그램")
})
}
shinyApp(ui, server)
library(shinydashboard)
ui <- dashboardPage(
dashboardHeader(
title = "안녕하세요"
),
dashboardSidebar(
sidebarMenu(
menuItem(enc2utf8("shinydashboard"), tabName = "shinydashboard", icon = icon("dashboard")),
menuItem(enc2utf8("shinydashboard_diff"), tabName = "shinydashboard_diff", icon = icon("dashboard"))
)
),
dashboardBody(
tabItems(
tabItem(tabName = "shinydashboard",
box(
title = "Controls",
sliderInput(inputId = "bins",
label = "Number of bins:",
min = 1,
max = 50,
value = 30),
width = 12
),
box(
width = 12,
plotOutput(outputId = "distPlot")
)
),
tabItem(tabName = "shinydashboard_diff",
box(
title = "Controls",
sliderInput(inputId = "bins_2",
label = "Number of bins:",
min = 1,
max = 50,
value = 30),
width = 12
),
box(
width = 12,
plotOutput(outputId = "distPlot_2")
)
)
)
)
)
server <- function(input, output) {
output$distPlot <- renderPlot({
x    <- faithful$waiting
bins <- seq(min(x), max(x), length.out = input$bins + 1)
hist(x, breaks = bins, col = "red", border = "white",
xlab = "",
main = "히스토그램")
})
output$distPlot_2 <- renderPlot({
x    <- faithful$waiting
bins <- seq(min(x), max(x), length.out = input$bins_2 + 1)
hist(x, breaks = bins, col = "red", border = "white",
xlab = "",
main = "히스토그램")
})
}
shinyApp(ui, server)
library(shinydashboard)
ui <- dashboardPage(
dashboardHeader(
title = "안녕하세요"
),
dashboardSidebar(
sidebarMenu(
menuItem(enc2utf8("shinydashboard"), tabName = "shinydashboard", icon = icon("dashboard")),
menuItem(enc2utf8("shinydashboard_diff"), tabName = "shinydashboard_diff", icon = icon("calendar"))
)
),
dashboardBody(
tabItems(
tabItem(tabName = "shinydashboard",
box(
title = "Controls",
sliderInput(inputId = "bins",
label = "Number of bins:",
min = 1,
max = 50,
value = 30),
width = 12
),
box(
width = 12,
plotOutput(outputId = "distPlot")
)
),
tabItem(tabName = "shinydashboard_diff",
box(
title = "Controls",
sliderInput(inputId = "bins_2",
label = "Number of bins:",
min = 1,
max = 50,
value = 30),
width = 12
),
box(
width = 12,
plotOutput(outputId = "distPlot_2")
)
)
)
)
)
server <- function(input, output) {
output$distPlot <- renderPlot({
x    <- faithful$waiting
bins <- seq(min(x), max(x), length.out = input$bins + 1)
hist(x, breaks = bins, col = "red", border = "white",
xlab = "",
main = "히스토그램")
})
output$distPlot_2 <- renderPlot({
x    <- faithful$waiting
bins <- seq(min(x), max(x), length.out = input$bins_2 + 1)
hist(x, breaks = bins, col = "red", border = "white",
xlab = "",
main = "히스토그램")
})
}
shinyApp(ui, server)
library(shinydashboard)
ui <- dashboardPage(
dashboardHeader(
title = "안녕하세요"
),
dashboardSidebar(
sidebarMenu(
menuItem(enc2utf8("shinydashboard"), tabName = "shinydashboard", icon = icon("dashboard")),
menuItem(enc2utf8("shinydashboard_diff"), tabName = "shinydashboard_diff", icon = icon("calendar"))
)
),
dashboardBody(
tabItems(
tabItem(tabName = "shinydashboard",
box(
title = "Controls",
sliderInput(inputId = "bins",
label = "Number of bins:",
min = 1,
max = 50,
value = 30),
width = 12
),
box(
width = 12,
plotOutput(outputId = "distPlot")
)
),
tabItem(tabName = "shinydashboard_diff",
box(
title = "Controls",
sliderInput(inputId = "bins_2",
label = "Number of bins:",
min = 1,
max = 50,
value = 30),
width = 12
),
box(
width = 12,
plotOutput(outputId = "distPlot_2")
)
)
)
)
)
server <- function(input, output) {
output$distPlot <- renderPlot({
x    <- faithful$waiting
bins <- seq(min(x), max(x), length.out = input$bins + 1)
hist(x, breaks = bins, col = "lightblue", border = "white",
xlab = "",
main = "히스토그램")
})
output$distPlot_2 <- renderPlot({
x    <- faithful$waiting
bins <- seq(min(x), max(x), length.out = input$bins_2 + 1)
hist(x, breaks = bins, col = "red", border = "white",
xlab = "",
main = "히스토그램")
})
}
shinyApp(ui, server)
library(shinydashboard)
ui <- dashboardPage(
## Header 영역을 설정합니다.
dashboardHeader(
title = "안녕하세요"
),
## Sidebar 영역을 설정합니다.
dashboardSidebar(
sidebarMenu(
menuItem(enc2utf8("shinydashboard"), tabName = "shinydashboard", icon = icon("dashboard")),
menuItem(enc2utf8("shinydashboard_diff"), tabName = "shinydashboard_diff", icon = icon("calendar"))
)
),
## Body 영역을 설정합니다.
dashboardBody(
tabItems(
tabItem(tabName = "shinydashboard",
box(
title = "Controls",
sliderInput(inputId = "bins",
label = "Number of bins:",
min = 1,
max = 50,
value = 30),
width = 12
),
box(
width = 12,
plotOutput(outputId = "distPlot")
)
),
tabItem(tabName = "shinydashboard_diff",
box(
title = "Controls",
sliderInput(inputId = "bins_2",
label = "Number of bins:",
min = 1,
max = 50,
value = 30),
width = 12
),
box(
width = 12,
plotOutput(outputId = "distPlot_2")
)
)
)
)
)
server <- function(input, output) {
output$distPlot <- renderPlot({
x    <- faithful$waiting
bins <- seq(min(x), max(x), length.out = input$bins + 1)
hist(x, breaks = bins, col = "lightblue", border = "white",
xlab = "",
main = "히스토그램")
})
output$distPlot_2 <- renderPlot({
x    <- faithful$waiting
bins <- seq(min(x), max(x), length.out = input$bins_2 + 1)
hist(x, breaks = bins, col = "red", border = "white",
xlab = "",
main = "히스토그램")
})
}
shinyApp(ui, server)
blogdown:::insert_image_addin()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::insert_image_addin()
blogdown:::new_post_addin()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
## 해당코드는 shinydashboard로 구현하는 코드입니다.
library(shinydashboard)
ui <- dashboardPage(
## Header 영역을 설정합니다.
dashboardHeader(
title = "안녕하세요"
),
## Sidebar 영역을 설정합니다.
dashboardSidebar(
sidebarMenu(
menuItem(enc2utf8("shinydashboard"), tabName = "shinydashboard", icon = icon("dashboard")),
menuItem(enc2utf8("shinydashboard_diff"), tabName = "shinydashboard_diff", icon = icon("calendar"))
)
),
## Body 영역을 설정합니다.
dashboardBody(
tabItems(
tabItem(tabName = "shinydashboard",
box(
title = "Controls",
sliderInput(inputId = "bins",
label = "Number of bins:",
min = 1,
max = 50,
value = 30),
width = 12
),
box(
width = 12,
plotOutput(outputId = "distPlot")
)
),
tabItem(tabName = "shinydashboard_diff",
box(
title = "Controls",
sliderInput(inputId = "bins_2",
label = "Number of bins:",
min = 1,
max = 50,
value = 30),
width = 12
),
box(
width = 12,
plotOutput(outputId = "distPlot_2")
)
)
)
)
)
version
package_version("rmarkdown")
package_version()
package_version(rmarkdown)
packageVersion("rmarkdown")
library(shinydashboard)
ui <- dashboardPage(
## Header 영역을 설정합니다.
dashboardHeader(
title = "안녕하세요"
),
## Sidebar 영역을 설정합니다.
dashboardSidebar(
sidebarMenu(
menuItem(enc2utf8("shinydashboard"), tabName = "shinydashboard", icon = icon("dashboard")),
menuItem(enc2utf8("shinydashboard_diff"), tabName = "shinydashboard_diff", icon = icon("calendar"))
)
),
## Body 영역을 설정합니다.
dashboardBody(
tabItems(
tabItem(tabName = "shinydashboard",
box(
title = "Controls",
sliderInput(inputId = "bins",
label = "Number of bins:",
min = 1,
max = 50,
value = 30),
width = 12
),
box(
width = 12,
plotOutput(outputId = "distPlot")
)
),
tabItem(tabName = "shinydashboard_diff",
box(
title = "Controls",
sliderInput(inputId = "bins_2",
label = "Number of bins:",
min = 1,
max = 50,
value = 30),
width = 12
),
box(
width = 12,
plotOutput(outputId = "distPlot_2")
)
)
)
)
)
server <- function(input, output) {
output$distPlot <- renderPlot({
x    <- faithful$waiting
bins <- seq(min(x), max(x), length.out = input$bins + 1)
hist(x, breaks = bins, col = "lightblue", border = "white",
xlab = "",
main = "히스토그램")
})
output$distPlot_2 <- renderPlot({
x    <- faithful$waiting
bins <- seq(min(x), max(x), length.out = input$bins_2 + 1)
hist(x, breaks = bins, col = "red", border = "white",
xlab = "",
main = "히스토그램")
})
}
shinyApp(ui, server)
library(shiny)
library(shinydashboard)
ui <- dashboardPage(
## Header 영역을 설정합니다.
dashboardHeader(
title = "안녕하세요"
),
## Sidebar 영역을 설정합니다.
dashboardSidebar(
sidebarMenu(
menuItem(enc2utf8("shinydashboard"), tabName = "shinydashboard", icon = icon("dashboard")),
menuItem(enc2utf8("shinydashboard_diff"), tabName = "shinydashboard_diff", icon = icon("calendar"))
)
),
## Body 영역을 설정합니다.
dashboardBody(
tabItems(
tabItem(tabName = "shinydashboard",
box(
title = "Controls",
sliderInput(inputId = "bins",
label = "Number of bins:",
min = 1,
max = 50,
value = 30),
width = 12
),
box(
width = 12,
plotOutput(outputId = "distPlot")
)
),
tabItem(tabName = "shinydashboard_diff",
box(
title = "Controls",
sliderInput(inputId = "bins_2",
label = "Number of bins:",
min = 1,
max = 50,
value = 30),
width = 12
),
box(
width = 12,
plotOutput(outputId = "distPlot_2")
)
)
)
)
)
server <- function(input, output) {
output$distPlot <- renderPlot({
x    <- faithful$waiting
bins <- seq(min(x), max(x), length.out = input$bins + 1)
hist(x, breaks = bins, col = "lightblue", border = "white",
xlab = "",
main = "히스토그램")
})
output$distPlot_2 <- renderPlot({
x    <- faithful$waiting
bins <- seq(min(x), max(x), length.out = input$bins_2 + 1)
hist(x, breaks = bins, col = "red", border = "white",
xlab = "",
main = "히스토그램")
})
}
shinyApp(ui, server)
blogdown:::insert_image_addin()
blogdown:::insert_image_addin()
blogdown:::insert_image_addin()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
