min = 1,
max = 50,
value = 30),
width = 12
),
box(
width = 12,
plotOutput(outputId = "distPlot")
)
),
tabItem(tabName = "shinydashboard_diff",
box(
title = "Controls",
sliderInput(inputId = "bins_2",
label = "Number of bins:",
min = 1,
max = 50,
value = 30),
width = 12
),
box(
width = 12,
plotOutput(outputId = "distPlot_2")
)
)
)
)
)
server <- function(input, output) {
output$distPlot <- renderPlot({
x    <- faithful$waiting
bins <- seq(min(x), max(x), length.out = input$bins + 1)
hist(x, breaks = bins, col = "red", border = "white",
xlab = "",
main = "히스토그램")
})
output$distPlot_2 <- renderPlot({
x    <- faithful$waiting
bins <- seq(min(x), max(x), length.out = input$bins_2 + 1)
hist(x, breaks = bins, col = "red", border = "white",
xlab = "",
main = "히스토그램")
})
}
shinyApp(ui, server)
library(shinydashboard)
ui <- dashboardPage(
dashboardHeader(
title = "안녕하세요"
),
dashboardSidebar(
sidebarMenu(
menuItem(enc2utf8("shinydashboard"), tabName = "shinydashboard", icon = icon("dashboard")),
menuItem(enc2utf8("shinydashboard_diff"), tabName = "shinydashboard_diff", icon = icon("calendar"))
)
),
dashboardBody(
tabItems(
tabItem(tabName = "shinydashboard",
box(
title = "Controls",
sliderInput(inputId = "bins",
label = "Number of bins:",
min = 1,
max = 50,
value = 30),
width = 12
),
box(
width = 12,
plotOutput(outputId = "distPlot")
)
),
tabItem(tabName = "shinydashboard_diff",
box(
title = "Controls",
sliderInput(inputId = "bins_2",
label = "Number of bins:",
min = 1,
max = 50,
value = 30),
width = 12
),
box(
width = 12,
plotOutput(outputId = "distPlot_2")
)
)
)
)
)
server <- function(input, output) {
output$distPlot <- renderPlot({
x    <- faithful$waiting
bins <- seq(min(x), max(x), length.out = input$bins + 1)
hist(x, breaks = bins, col = "red", border = "white",
xlab = "",
main = "히스토그램")
})
output$distPlot_2 <- renderPlot({
x    <- faithful$waiting
bins <- seq(min(x), max(x), length.out = input$bins_2 + 1)
hist(x, breaks = bins, col = "red", border = "white",
xlab = "",
main = "히스토그램")
})
}
shinyApp(ui, server)
library(shinydashboard)
ui <- dashboardPage(
dashboardHeader(
title = "안녕하세요"
),
dashboardSidebar(
sidebarMenu(
menuItem(enc2utf8("shinydashboard"), tabName = "shinydashboard", icon = icon("dashboard")),
menuItem(enc2utf8("shinydashboard_diff"), tabName = "shinydashboard_diff", icon = icon("calendar"))
)
),
dashboardBody(
tabItems(
tabItem(tabName = "shinydashboard",
box(
title = "Controls",
sliderInput(inputId = "bins",
label = "Number of bins:",
min = 1,
max = 50,
value = 30),
width = 12
),
box(
width = 12,
plotOutput(outputId = "distPlot")
)
),
tabItem(tabName = "shinydashboard_diff",
box(
title = "Controls",
sliderInput(inputId = "bins_2",
label = "Number of bins:",
min = 1,
max = 50,
value = 30),
width = 12
),
box(
width = 12,
plotOutput(outputId = "distPlot_2")
)
)
)
)
)
server <- function(input, output) {
output$distPlot <- renderPlot({
x    <- faithful$waiting
bins <- seq(min(x), max(x), length.out = input$bins + 1)
hist(x, breaks = bins, col = "lightblue", border = "white",
xlab = "",
main = "히스토그램")
})
output$distPlot_2 <- renderPlot({
x    <- faithful$waiting
bins <- seq(min(x), max(x), length.out = input$bins_2 + 1)
hist(x, breaks = bins, col = "red", border = "white",
xlab = "",
main = "히스토그램")
})
}
shinyApp(ui, server)
library(shinydashboard)
ui <- dashboardPage(
## Header 영역을 설정합니다.
dashboardHeader(
title = "안녕하세요"
),
## Sidebar 영역을 설정합니다.
dashboardSidebar(
sidebarMenu(
menuItem(enc2utf8("shinydashboard"), tabName = "shinydashboard", icon = icon("dashboard")),
menuItem(enc2utf8("shinydashboard_diff"), tabName = "shinydashboard_diff", icon = icon("calendar"))
)
),
## Body 영역을 설정합니다.
dashboardBody(
tabItems(
tabItem(tabName = "shinydashboard",
box(
title = "Controls",
sliderInput(inputId = "bins",
label = "Number of bins:",
min = 1,
max = 50,
value = 30),
width = 12
),
box(
width = 12,
plotOutput(outputId = "distPlot")
)
),
tabItem(tabName = "shinydashboard_diff",
box(
title = "Controls",
sliderInput(inputId = "bins_2",
label = "Number of bins:",
min = 1,
max = 50,
value = 30),
width = 12
),
box(
width = 12,
plotOutput(outputId = "distPlot_2")
)
)
)
)
)
server <- function(input, output) {
output$distPlot <- renderPlot({
x    <- faithful$waiting
bins <- seq(min(x), max(x), length.out = input$bins + 1)
hist(x, breaks = bins, col = "lightblue", border = "white",
xlab = "",
main = "히스토그램")
})
output$distPlot_2 <- renderPlot({
x    <- faithful$waiting
bins <- seq(min(x), max(x), length.out = input$bins_2 + 1)
hist(x, breaks = bins, col = "red", border = "white",
xlab = "",
main = "히스토그램")
})
}
shinyApp(ui, server)
blogdown:::insert_image_addin()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::insert_image_addin()
blogdown:::new_post_addin()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
## 해당코드는 shinydashboard로 구현하는 코드입니다.
library(shinydashboard)
ui <- dashboardPage(
## Header 영역을 설정합니다.
dashboardHeader(
title = "안녕하세요"
),
## Sidebar 영역을 설정합니다.
dashboardSidebar(
sidebarMenu(
menuItem(enc2utf8("shinydashboard"), tabName = "shinydashboard", icon = icon("dashboard")),
menuItem(enc2utf8("shinydashboard_diff"), tabName = "shinydashboard_diff", icon = icon("calendar"))
)
),
## Body 영역을 설정합니다.
dashboardBody(
tabItems(
tabItem(tabName = "shinydashboard",
box(
title = "Controls",
sliderInput(inputId = "bins",
label = "Number of bins:",
min = 1,
max = 50,
value = 30),
width = 12
),
box(
width = 12,
plotOutput(outputId = "distPlot")
)
),
tabItem(tabName = "shinydashboard_diff",
box(
title = "Controls",
sliderInput(inputId = "bins_2",
label = "Number of bins:",
min = 1,
max = 50,
value = 30),
width = 12
),
box(
width = 12,
plotOutput(outputId = "distPlot_2")
)
)
)
)
)
version
package_version("rmarkdown")
package_version()
package_version(rmarkdown)
packageVersion("rmarkdown")
library(shinydashboard)
ui <- dashboardPage(
## Header 영역을 설정합니다.
dashboardHeader(
title = "안녕하세요"
),
## Sidebar 영역을 설정합니다.
dashboardSidebar(
sidebarMenu(
menuItem(enc2utf8("shinydashboard"), tabName = "shinydashboard", icon = icon("dashboard")),
menuItem(enc2utf8("shinydashboard_diff"), tabName = "shinydashboard_diff", icon = icon("calendar"))
)
),
## Body 영역을 설정합니다.
dashboardBody(
tabItems(
tabItem(tabName = "shinydashboard",
box(
title = "Controls",
sliderInput(inputId = "bins",
label = "Number of bins:",
min = 1,
max = 50,
value = 30),
width = 12
),
box(
width = 12,
plotOutput(outputId = "distPlot")
)
),
tabItem(tabName = "shinydashboard_diff",
box(
title = "Controls",
sliderInput(inputId = "bins_2",
label = "Number of bins:",
min = 1,
max = 50,
value = 30),
width = 12
),
box(
width = 12,
plotOutput(outputId = "distPlot_2")
)
)
)
)
)
server <- function(input, output) {
output$distPlot <- renderPlot({
x    <- faithful$waiting
bins <- seq(min(x), max(x), length.out = input$bins + 1)
hist(x, breaks = bins, col = "lightblue", border = "white",
xlab = "",
main = "히스토그램")
})
output$distPlot_2 <- renderPlot({
x    <- faithful$waiting
bins <- seq(min(x), max(x), length.out = input$bins_2 + 1)
hist(x, breaks = bins, col = "red", border = "white",
xlab = "",
main = "히스토그램")
})
}
shinyApp(ui, server)
library(shiny)
library(shinydashboard)
ui <- dashboardPage(
## Header 영역을 설정합니다.
dashboardHeader(
title = "안녕하세요"
),
## Sidebar 영역을 설정합니다.
dashboardSidebar(
sidebarMenu(
menuItem(enc2utf8("shinydashboard"), tabName = "shinydashboard", icon = icon("dashboard")),
menuItem(enc2utf8("shinydashboard_diff"), tabName = "shinydashboard_diff", icon = icon("calendar"))
)
),
## Body 영역을 설정합니다.
dashboardBody(
tabItems(
tabItem(tabName = "shinydashboard",
box(
title = "Controls",
sliderInput(inputId = "bins",
label = "Number of bins:",
min = 1,
max = 50,
value = 30),
width = 12
),
box(
width = 12,
plotOutput(outputId = "distPlot")
)
),
tabItem(tabName = "shinydashboard_diff",
box(
title = "Controls",
sliderInput(inputId = "bins_2",
label = "Number of bins:",
min = 1,
max = 50,
value = 30),
width = 12
),
box(
width = 12,
plotOutput(outputId = "distPlot_2")
)
)
)
)
)
server <- function(input, output) {
output$distPlot <- renderPlot({
x    <- faithful$waiting
bins <- seq(min(x), max(x), length.out = input$bins + 1)
hist(x, breaks = bins, col = "lightblue", border = "white",
xlab = "",
main = "히스토그램")
})
output$distPlot_2 <- renderPlot({
x    <- faithful$waiting
bins <- seq(min(x), max(x), length.out = input$bins_2 + 1)
hist(x, breaks = bins, col = "red", border = "white",
xlab = "",
main = "히스토그램")
})
}
shinyApp(ui, server)
blogdown:::insert_image_addin()
blogdown:::insert_image_addin()
blogdown:::insert_image_addin()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
logdown::serve_site()
blogdown::serve_site()
getwd()
data.path = "content/post/report-thejsoo-20191029"
data.path
data.path = "/content/post/report-thejsoo-20191029"
ad.page = read.csv(file.path(data.path, "모아보기탭 방문자수.csv"), stringsAsFactors = F, header = T)
data.path
file.path(data.path, "모아보기탭 방문자수.csv")
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(dplyr)
library(highcharter)
library(reshape2)
#devtools::install_github("timelyportfolio/d3vennR")
library("d3vennR")
library(DT)
# for using Korean
theme_set(theme_gray(base_family='NanumGothic'))
# load data
data.path = "./content/post/report-thejsoo-20191029"
ad.page = read.csv(file.path(data.path, "모아보기탭 방문자수.csv"), stringsAsFactors = F, header = T)
getwd()
getwd()
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(dplyr)
library(highcharter)
library(reshape2)
#devtools::install_github("timelyportfolio/d3vennR")
library("d3vennR")
library(DT)
# for using Korean
theme_set(theme_gray(base_family='NanumGothic'))
# load data
data.path = "/Users/heejaelee/Desktop/blog/content/post/report-thejsoo-20191029"
ad.page = read.csv(file.path(data.path, "모아보기탭 방문자수.csv"), stringsAsFactors = F, header = T)
ad.page$date_no = as.Date(ad.page$date_no)
event.page = read.csv(file.path(data.path, "더제이수 페이지 pv_uv.csv"), stringsAsFactors = F, header = T)
event.page$date_no = as.Date(event.page$date_no)
event.page_vs = read.csv(file.path(data.path, "트렌드어패럴 vs 메리어라운드 vs 엔비룩 vs 더제이수.csv"), stringsAsFactors = F, header = T)
event.page_vs$date_no = as.Date(event.page_vs$date_no)
shop_dailies_thejsoo = read.csv(file.path(data.path, "더제이수 쇼핑몰 페이지 PV_UV(경쟁사 포함).csv"), stringsAsFactors = F, header = T)
shop_dailies_thejsoo$date_simple = as.Date(shop_dailies_thejsoo$date_simple)
orders.thejsoo = read.csv(file.path(data.path, "더제이수 쇼핑몰 주문액(경쟁사 포함).csv"), stringsAsFactors = F, header = T)
orders.thejsoo$date_paid_simple = as.Date(orders.thejsoo$date_paid_simple)
#### 일자 설정 #######
start_date = "2019-10-26"
end_date = "2019-10-28"
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::install_hugo()
blogdown::hugo_version()
blogdown:::find_hugo()
blogdown::install_hugo(version="latest", force=TRUE)
blogdown::serve_site()
blogdown::serve_site()
getwd()
blogdown::serve_site()
blogdown::serve_site()
servr::daemon_stop(2)
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
servr::daemon_stop(6)
blogdown::serve_site()
blogdown::serve_site()
